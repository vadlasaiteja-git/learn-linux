Process Management
Process management is integral part of any operating system and Linux is no different. Every program running on Linux, be it an application or a system operation, is treated as a process. These processes perform different tasks but work together to provide a seamless operating experience.

In Linux, users can interact and manage these processes by using different commands for various process management tasks such as viewing the currently running processes, killing processes, changing the priority of a process, and so on. Understanding these commands and how to use them effectively is essential to Linux process management.

The ps command for example, provides information about the currently running processes:

>_ps aux
This will list out all the currently running processes with information such as the process ID, the user running that process, the CPU and memory it’s consuming, the command that started the process, and more.

top is another common command. It provides a live, updating view of the current state of the system including processes:

top

Yet another powerful tool is kill, which can send specific signals to processes. For example, you can gracefully stop a process with SIGTERM (15) or forcefully stop one with SIGKILL (9):

kill -SIGTERM pid
kill -SIGKILL pid

Managing bg (background) and fg (foreground) Processes
In Linux environment, a process can be run in either the foreground (fg) or the background (bg). The foreground process takes input directly from the user, displaying output and errors to the user’s terminal. On the other hand, a background process runs independently of the user’s actions, freeing up the terminal for other tasks.

Typically, a process starts in the foreground. However, you can send it to the background by appending an ampersand (&) to the command or by using the bg command. Conversely, the fg command brings a background process to the foreground.

Here’s how you can send a running process to background:

command &

Or if a process is already running:

CTRL + Z       # This will pause the process
bg             # This resumes the paused process in the background
And to bring it back to the foreground:

fg
These commands, bg and fg are part of job control in Unix-like operating systems, which lets you manage multiple tasks simultaneously from a single terminal.


Listing and Finding Processes (proc)
In Linux, processes form the backbone of any functioning system - running various tasks and executing different operations. In order to effectively manage your Linux system, it’s crucial to be able to list and find the currently running processes. This aids in monitoring system performance, tracking down any issues, and in controlling resource allocation.

The proc filesystem is an extremely powerful tool in this respect. Available in all Unix-like operating systems, proc is a virtual file system that provides detailed information about running processes, including its PID, status, and resource consumption.

With commands like ps, top, and htop, we can quickly list out the running processes on the Linux system. Specifically, the ps command offers an in-depth snapshot of currently running processes, whereas top and htop give real-time views of system performance.

# list all running processes
ps -ef 

# display ongoing list of running processes 
top

# alternatively, for a more user-friendly interface
htop


Exploring the proc directory (/proc), we dive even deeper, enabling us to view the system’s kernel parameters and each process’s specific system details.

# view specifics of a particular PID
cat /proc/{PID}/status
In short, ‘Finding and Listing Processes (proc)’ in Linux is not just a core aspect of process management, but also a necessary skill for enhancing system performance and resolution of issues.
