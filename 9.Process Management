Process Management
Process management is integral part of any operating system and Linux is no different. Every program running on Linux, be it an application or a system operation, is treated as a process. These processes perform different tasks but work together to provide a seamless operating experience.

In Linux, users can interact and manage these processes by using different commands for various process management tasks such as viewing the currently running processes, killing processes, changing the priority of a process, and so on. Understanding these commands and how to use them effectively is essential to Linux process management.

The ps command for example, provides information about the currently running processes:

>_ps aux
This will list out all the currently running processes with information such as the process ID, the user running that process, the CPU and memory it’s consuming, the command that started the process, and more.

top is another common command. It provides a live, updating view of the current state of the system including processes:

top

Yet another powerful tool is kill, which can send specific signals to processes. For example, you can gracefully stop a process with SIGTERM (15) or forcefully stop one with SIGKILL (9):

kill -SIGTERM pid
kill -SIGKILL pid

Managing bg (background) and fg (foreground) Processes
In Linux environment, a process can be run in either the foreground (fg) or the background (bg). The foreground process takes input directly from the user, displaying output and errors to the user’s terminal. On the other hand, a background process runs independently of the user’s actions, freeing up the terminal for other tasks.

Typically, a process starts in the foreground. However, you can send it to the background by appending an ampersand (&) to the command or by using the bg command. Conversely, the fg command brings a background process to the foreground.

Here’s how you can send a running process to background:

command &

Or if a process is already running:

CTRL + Z       # This will pause the process
bg             # This resumes the paused process in the background
And to bring it back to the foreground:

fg
These commands, bg and fg are part of job control in Unix-like operating systems, which lets you manage multiple tasks simultaneously from a single terminal.


Listing and Finding Processes (proc)
In Linux, processes form the backbone of any functioning system - running various tasks and executing different operations. In order to effectively manage your Linux system, it’s crucial to be able to list and find the currently running processes. This aids in monitoring system performance, tracking down any issues, and in controlling resource allocation.

The proc filesystem is an extremely powerful tool in this respect. Available in all Unix-like operating systems, proc is a virtual file system that provides detailed information about running processes, including its PID, status, and resource consumption.

With commands like ps, top, and htop, we can quickly list out the running processes on the Linux system. Specifically, the ps command offers an in-depth snapshot of currently running processes, whereas top and htop give real-time views of system performance.

# list all running processes
ps -ef 

# display ongoing list of running processes 
top

# alternatively, for a more user-friendly interface
htop


Exploring the proc directory (/proc), we dive even deeper, enabling us to view the system’s kernel parameters and each process’s specific system details.

# view specifics of a particular PID
cat /proc/{PID}/status
In short, ‘Finding and Listing Processes (proc)’ in Linux is not just a core aspect of process management, but also a necessary skill for enhancing system performance and resolution of issues.

Proc Signals under Process Management
In Linux, process management is a fundamental part of the system which involves creating, scheduling, terminating and coordinating the execution of processes. One crucial aspect of this is proc signals or process signals.

Process signals are a form of communication mechanism in Unix and Linux systems. They provide a means to notify a process of synchronous or asynchronous events. There are a variety of signals like SIGINT, SIGSTOP, SIGKILL, etc. available which can be sent to a running process to interrupt, pause or terminate it.

For instance, to send a SIGSTOP signal to a process with a PID of 12345 you would use kill command in terminal as follows:

kill -SIGSTOP 12345
This will suspend the execution of the process until a SIGCONT signal is received.

Understanding proc signals is essential for comprehensive process management and resource allocation in Linux.

Kill Processes
On any Linux system, whether you’re on a server or a desktop system, processes are consistently running. Sometimes, these processes may not behave as expected due to certain reasons like system bugs, unexpected system behavior, or accidental initiation and may require termination. This is where the concept of killing processes in Linux comes to picture under the area of process management.

‘Kill’ in Linux is a built-in command that is used to terminate processes manually. You can use the kill command to send a specific signal to a process. When we use the kill command, we basically request a process to stop, pause, or terminate.

Here’s a basic illustration on how to use the kill command in Linux:

kill [signal or option] PID(s)
In practice, you would identify the Process ID (PID) of the process you want to terminate and replace PID(s) in the above command. The signal or option part is optional, but very powerful allowing for specific termination actions.

Proc Priorities Under Process Management
In the Linux environment, every running task or essentially a “process” is assigned a certain priority level that impacts its execution timing. These priorities are instrumental in efficient system resource utilization, enabling Linux to fine-tune execution and allocate system resources smartly.

The Linux kernel sorts processes in the proc structure, typically found under the /proc file system directory. This structure contains information about all active processes, including their priorities. The concept of proc priorities under process management refers to the priority accorded to each process by the system. This priority value (also known as “nice” value) ranges from -20 (highest priority) to +19 (lowest priority).

By understanding and managing proc priorities, you can optimize system performance and control which processes receive more or less of the CPU’s attention.

Here’s a simple command in the Linux terminal to display the process ID, priority, and user for all processes:

ps -eo pid,pri,user
To change the priority of any process, you can use the renice command:

renice -5 -p [PID]   # Increase priority by 5 units for process ID [PID]

Process Forking in Process Management
Process forking is a fundamental concept under process management in Linux systems. The term refers to the mechanism where a running process (parent process) can generate a copy of itself (child process), enabling concurrent execution of both processes. This is facilitated by the ‘fork’ system call. It is a prominent aspect in understanding the creation and control of processes in a Linux environment.

The child process created by fork is a nearly perfect copy of the parent process with exception to just a few values including the process ID and parent process ID. Any changes made in the child process does not affect the parent process, and vice versa.

#include<sys/types.h>
#include<unistd.h>
#include<stdio.h>

int main()
{
    pid_t child_pid;

    // Try creating a child process
    child_pid = fork();

    // If a child is successfully created
    if(child_pid >= 0)
    printf("Child created with PID: %d\n", child_pid);
    else
    printf("Fork failed\n");
    return 0;
}

In this snippet, fork() is used to created a new child process. If the process creation is successful, fork() returns the process ID of the child process. If unsuccessful, it returns a negative value.
