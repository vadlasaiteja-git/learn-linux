LAB 

Creating a Sample Directory Structure
cd ~/project
mkdir -p test_dir/{subdir1,subdir2}
echo "This is file 1" > test_dir/file1.txt
echo "This is file 2" > test_dir/file2.txt
echo "This is in subdir1" > test_dir/subdir1/subfile1.txt
echo "This is in subdir2" > test_dir/subdir2/subfile2.txt

Now, let's verify the structure we've created:
tree test_dir

Packaging Files with tar
Now that we have our sample directory structure, let's learn about packaging files using the tar command. tar stands for "tape archive" and was originally used to create archives on tape drives. Today, it's commonly used to bundle multiple files and directories into a single file.

Let's package our test_dir:
cd ~/project
tar -cvf test_archive.tar test_dir

Let's break down this command:

tar: The command we're using to create the archive.
-c: This option tells tar to create a new archive.
-v: This stands for "verbose". It makes tar print out the names of the files it's adding to the archive. This is optional but helpful to see what's happening.
-f: This option is followed by the name of the archive file we want to create.
test_archive.tar: This is the name we're giving to our new archive file. The .tar extension is conventional for tar archives.
test_dir: This is the directory we're packaging into the archive.

To view the contents of the archive without extracting it, you can use:

tar -tvf test_archive.tar
This command lists (-t) the contents of the archive, verbosely (-v), from the file (-f) named test_archive.tar.

Extracting Files from a tar Archive

mkdir extracted_tar
tar -xvf test_archive.tar -C extracted_tar

Let's break down this command:

mkdir extracted_tar: This creates a new directory called extracted_tar where we'll put the contents of our archive.
tar: The command we're using to extract the archive.
-x: This option tells tar to extract files from an archive.
-v: This makes the operation verbose, showing us each file as it's extracted.
-f: This option specifies the name of the archive file to be operated on. When extracting files, it should be followed by the path or name of the tar file to extract.
-C extracted_tar: This option tells tar to change to the extracted_tar directory before extracting files.

To verify the extraction, you can use:

tree extracted_tar

Compressing Files with gzip
Now that we have created a tar archive, let's compress it using gzip:

gzip test_archive.tar

This command will compress test_archive.tar and rename it to test_archive.tar.gz. The original test_archive.tar file will be replaced by the compressed version.

To see the size of the compressed file, you can use the following command:

ls -lh test_archive.tar.gz

The -lh options will show the file size in a human-readable format (like KB, MB, etc.).

It's worth noting that while the .tar.gz extension is common, you might also see .tgz, which is equivalent.

Understanding the Difference Between Packaging and Compression
Now that we've performed both packaging and compression, let's understand the difference between these operations and compare the file sizes.

Packaging (Archiving):

Purpose: To combine multiple files and directories into a single file.
What it does: Groups files together, adding some metadata.
Example tool: tar (Tape Archive)
Result: The total size of the archive is often slightly larger than the sum of the sizes of all files within it.
Compression:

Purpose: To reduce the size of a file or an archive.
What it does: Applies algorithms to remove redundancy in data, making the file smaller.
Example tools: gzip, bzip2, xz
Result: The compressed file is smaller than the original, but requires decompression before use.

Let's compare the sizes of our original directory, the tar archive, and the compressed tar.gz file:
# Size of the original directory
echo "Size of the original directory:"
du -sh test_dir

# Size of the tar archive (we'll recreate it for this comparison)
tar -cvf test_archive_compare.tar test_dir
echo "Size of the tar archive:"
ls -lh test_archive_compare.tar

# Size of the compressed tar.gz file
echo "Size of the compressed tar.gz file:"
ls -lh test_archive.tar.gz

You'll notice that:

The tar archive is slightly larger than the original directory. This is because tar adds some metadata to the archive, such as file names, permissions, and directory structures.
The compressed tar.gz file is significantly smaller than both the original directory and the tar archive.
The increase in size after packaging is normal and expected. The tar format adds a small amount of overhead to store file metadata, which is necessary for correctly reconstructing the directory structure when unpacking. This overhead is usually negligible for larger directories but can be noticeable for very small files or directories.

Compression, on the other hand, significantly reduces the file size by identifying and eliminating redundancies in the data. This is particularly effective for text files or files with repetitive content.


Creating a Compressed Archive in One Step
While it's helpful to understand the separate steps of creating a tar archive and then compressing it, in practice, these steps are often combined. The tar command has a built-in option to compress the archive using gzip as it's being created.

Let's create a compressed tar archive of our test_dir in one step:

cd ~/project
tar -czvf test_combined.tar.gz test_dir

This command is similar to what we used before, with one important addition:

-z: This option tells tar to compress the archive using gzip.
The resulting test_combined.tar.gz file is equivalent to what we created in the previous two steps, but we've done it all at once.

To view the contents of this compressed archive without extracting it:

tar -tzvf test_combined.tar.gz

The -z option here tells tar that we're dealing with a gzip-compressed file.


Extracting Files from a Compressed Archive
Now that we've created compressed archives, it's important to know how to extract files from them. Let's extract the contents of our test_combined.tar.gz file:

Let's break down this command:

mkdir extracted: This creates a new directory called extracted where we'll put the contents of our archive.
tar: The command we're using to extract the archive.
-x: This option tells tar to extract files from an archive.
-z: This option is needed because we're dealing with a gzip-compressed file.
-v: This makes the operation verbose, showing us each file as it's extracted.
-f: This is followed by the name of the archive file we want to extract from.
-C extracted: This option tells tar to change to the extracted directory before extracting files.


