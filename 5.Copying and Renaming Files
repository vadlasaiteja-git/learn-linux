## Understanding the Basic cp Command
The cp command is fundamental for duplicating files in Linux.

cp ~/project/important_report.txt ~/project/important_report_backup.txt

This command creates a copy of important_report.txt named important_report_backup.txt in the same directory. Here's what each part of the command means:

cp: This is the command for copying files.
~/project/important_report.txt: This is the source file we want to copy. The ~ symbol represents your home directory.
~/project/important_report_backup.txt: This is the destination file. We're creating a new file with "_backup" added to the name.


Copying Files to Different Directories

Now, let's copy a music file from your project directory to the music directory:

cp ~/project/favorite_song.mp3 ~/project/music/

This command copies favorite_song.mp3 from your project directory to the music directory. Let's break down the command:

cp: The copy command.
~/project/favorite_song.mp3: The source file we're copying.
~/project/music/: The destination directory. Notice the trailing slash (/) - this tells cp that music is a directory.

Copying Multiple Files at Once
You can copy multiple files in a single command, which is useful for batch operations. Let's organize your document collection.

cp ~/project/report1.txt ~/project/report2.txt ~/project/notes.txt ~/project/documents/

This command copies report1.txt, report2.txt, and notes.txt to the documents directory. Here's how it works:

cp: The copy command.
~/project/report1.txt ~/project/report2.txt ~/project/notes.txt: These are the source files we're copying. You can list as many files as you need, separated by spaces.
~/project/documents/: This is the destination directory.

Using the -i Option for Interactive Copying
When copying files, you might encounter situations where the destination already contains a file with the same name. 
The -i option makes cp interactive, prompting you before overwriting existing files.

cp -i ~/project/new_test_file.txt ~/project/test_file.txt

When prompted, type y and press Enter to overwrite the file. If you don't want to overwrite, type n and press Enter.

The -i option stands for "interactive". It tells cp to ask for confirmation before overwriting any existing files. This is a safety measure to prevent accidental data loss.


Recursive Copying with the -r Option
The -r option allows you to copy directories and their contents recursively. This is particularly useful for backing up entire directory structures.

cp -r ~/project/website ~/project/website_backup

This command copies the website directory and all its contents to a new directory called website_backup. Here's what each part means:

cp: The copy command.
-r: This option stands for "recursive". It tells cp to copy directories and their contents.
~/project/website: This is the source directory we're copying.
~/project/website_backup: This is the new directory where we're copying everything.

Verify the backup was created successfully:
ls -R ~/project/website_backup
You should see the entire directory structure and files listed. The -R option with ls shows the contents of directories recursively.

Preserving File Attributes with the -p Option
When copying files, you might want to preserve the original file's attributes such as timestamps and permissions. The -p option does this for you.
cp -p ~/project/old_file.txt ~/project/preserved_file.txt
The -p option stands for "preserve". It maintains the original file's modification time, access time, and permissions.
Let's compare the attributes of both files:
ls -l ~/project/old_file.txt ~/project/preserved_file.txt

You should see that both files have the same date and time. If they differ, make sure you used the -p option with cp.

Using Wildcards for Selective Copying
Wildcards allow you to copy multiple files based on patterns. This is useful when you want to copy files of a certain type or with specific naming conventions.

Using Wildcards for Selective Copying
Wildcards allow you to copy multiple files based on patterns. This is useful when you want to copy files of a certain type or with specific naming conventions.

Let's copy all text files to the text_files directory:
cp ~/project/*.txt ~/project/text_files/
And copy all PDF files to the pdf_files directory:
cp ~/project/*.pdf ~/project/pdf_files/

Here's what the wildcard (*) means:

*.txt matches any file that ends with ".txt"
*.pdf matches any file that ends with ".pdf"
This allows you to copy multiple files without listing them individually.

Verify the files were copied correctly:

ls ~/project/text_files
ls ~/project/pdf_files

## Moving files
Let's assume project directory structure as shown below
labex:project/ $ ls
images  index.html  script.js  styles.css  utils.js

Now, let's move a file to organize our project structure better. We'll move the styles.css file into a new directory called css.
mkdir css

Now, let's use the mv command to move styles.css into the css directory:
mv styles.css css/

Let's break down this command:

mv is the command we're using to move files
styles.css is the source file we want to move
css/ is the destination directory where we want to move the file
The forward slash after css indicates that it's a directory. Including the slash is optional but can help clarify that we're moving the file into a directory.

Verify ; $ ls css/

## Renaming a File
Sometimes, we need to rename files to follow naming conventions or update versions. The mv command can also be used to rename files.

Let's rename index.html to home.html. We'll use the mv command again, but this time both the source and destination will be in the same directory:

mv index.html home.html

In this command:

index.html is the current name of the file (the source)
home.html is the new name we want to give the file (the destination)
When the source and destination are in the same directory, mv understands that we want to rename the file rather than move it.


Moving Multiple Files
Often, you'll need to move multiple files at once. Let's organize our JavaScript files by moving them into a scripts directory.

First, create a new directory for scripts using the mkdir command:
mkdir scripts

Now, we'll use the mv command to move all .js files into the scripts directory:
mv *.js scripts/

Let's break down this command:

mv is our command to move files
*.js is a pattern that matches all files ending with .js. The * is a wildcard that means "match any characters"
scripts/ is our destination directory

This command will move all JavaScript files (files ending with .js) into the scripts directory.

To verify the move, use the ls command to check the contents of the scripts directory: ls scripts/







