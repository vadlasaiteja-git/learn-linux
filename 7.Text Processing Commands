Text processing in Linux involves manipulating text data to extract meaningful information or to transform it into a desired output. 
This is particularly useful because in Linux, everything is treated as a file, including text data. 
By mastering Linux text processing commands, you can complete tasks more efficiently, saving time and effort in your daily workflow.

These commands are especially useful in several scenarios, such as when working with log files during debugging, in CI/CD pipelines, or when handling large amounts of data.

A Brief Overview Of STDIN, STDOUT & STDERR

Standard input (stdin), standard output (stdout), and standard error (stderr) are the three standard streams that allow users to interact with commands and scripts in Linux. 
Understanding how to use these streams is crucial for efficiently working with Linux commands and scripts. 
Without a clear understanding of stdin, stdout, and stderr, it can be challenging to effectively manage command output.

Stdin - short for Standard input, It’s the way you give input to a program. For example:

grep something file.txt
The command above reads the content of the file, search for a pattern, then prints the result of the search in your shell. 
In this case, the content of file.txt is stdin. 

Stdout - Short for Standard output, It’s an output stream that a program writes its output data. 
It can be the terminal or a file on the system (if you’ve enough privileges).

Stderr - Short for Standard error, It’s an output stream that the program writes error to. 
Similar to standard output, you can redirect the output error message to a file using 2> operator.

Pipes & Redirection
Pipes and redirections are used when you want to combine two or more commands together. 
For example, the first command can write a stream of output to a file, and the second command can operate on that file.

$ echo "Hello World" | tr [a-z] [A-Z]  
Output:
HELLO WORLD

In the above command we have taken the output of the first command and then passed it through the tr command which capitalized all the letters.


Redirection.

Most commonly, when we interact with Unix-like systems, the keyboard is the standard input and the terminal is the standard output. 
However, the file can also be the standard input or output. We can read from a file and use it as the input for a command. 
Similarly, We can also write the output of a command to a file. This is called redirection.
The following operators are used for redirection operations:

The > operator is used to redirect the output of a command to a file:

>_curl -L https://GitHub.com/earthly/earthly/raw/main/README.md > README.md

The above command read the content of the README.md file of the earthly repository and write its content to a README.md file on your local system.


The >> operator is used to append the output of a command to the end of an existing file or write to a new file.

For example, If you’ve a file already in your local system and you want to add new content to the end of file then you can use the >> operator:

$ cat numbers.txt
one
two
Say, you want to append “three” to this file. You can use the >> operator in this case:

echo "three" >> numbers.txt
If you use only the > then it will replace the content of the file with “three”.

The < operator is used to read from a file and then act on it. For example:

wc -l < numbers.txt > lines.txt
The above command takes the input of the wc line count command from the numbers.txt file and redirects the line count to a file called lines.txt


The 2> operator is used to redirect error messages to a particular file. 
This is useful when you’re executing a command or a script on your system and want to capture the error if something goes wrong:

$ kubectl apply -f namespace.yaml 2> error.txt
