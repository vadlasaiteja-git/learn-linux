# Linux File Permissions
In Linux systems, rights and privileges are assigned to files and directories in the form of permissions. These permissions indicate who can read, write, or execute (run) them. In Linux, there are three types of users: owners, groups, and others who can have a different set of permissions.

In fact, permissions on the system are there for a reason: to prevent unprivileged users from making changes on the system that would ultimately affect other users. With inadequate permissions, unprivileged users are able to make changes that would be beneficial or harmless to the Linux system.

Letâ€™s have a look at an example:

The ls -l command (list with long format) provides detailed information about the file, including its permissions, owner, and group. You should see output similar to this:

-rw-rw-r-- 1 labex labex 0 Jul 29 15:11 example.txt
Let's break down this output:

-rw-rw-r-- represents the file permissions . The first character indicates the file type ( - for a regular file, d for directory, etc.). The remaining characters represent read, write, and execute permissions for the owner, group, and others.
The first labex is the current owner of the file. This is the username that owns the file.
The second labex is the current group of the file. A group is a collection of users that can share permissions.
0 is the file size in bytes. Since the file is empty, its size is zero.
Jul 29 15:11 is the last modified date and time.
example.txt is the file name.

Now, let's change the ownership of the file to the root user. root is the administrator account on Linux systems, and it has special privileges.

sudo chown root:root example.txt
Here's what this command does:

sudo runs the command with root privileges. You'll likely be prompted for your password. chown requires elevated privileges because it's a powerful command that can affect system security. Without sudo, you'll get a "Permission denied" error.
chown is the command to change ownership.
root:root specifies the new owner and group (both set to root). The syntax is owner:group.
example.txt is the target file.


labex:project/ $ ls -lR new-dir
new-dir:
total 4
-rw-rw-r-- 1 labex labex 13 Feb 22 01:51 file1.txt
drwxrwxr-x 2 labex labex 23 Feb 22 01:51 subdir

new-dir/subdir:
total 4
-rw-rw-r-- 1 labex labex 13 Feb 22 01:51 file2.txt
labex:project/ $ sudo chown -R root:root new-dir
labex:project/ $ ls -lR new-dir                 
new-dir:
total 4
-rw-rw-r-- 1 root root 13 Feb 22 01:51 file1.txt
drwxrwxr-x 2 root root 23 Feb 22 01:51 subdir

new-dir/subdir:
total 4
-rw-rw-r-- 1 root root 13 Feb 22 01:51 file2.txt


Changing Permissions pf a file
sudo chmod 700 example.txt

In this command:

700 is a numeric representation of permissions:
The first digit (7) represents the owner's permissions.
The second digit (0) represents the group's permissions.
The third digit (0) represents the others' permissions.

Each digit is a number from 0 to 7, calculated by adding the values for read (4), write (2), and execute (1) permissions:

4: Read permission
2: Write permission
1: Execute permission
0: No permission

Example: 
labex:project/ $ ls -l example.txt 
-rw-rw-r-- 1 root root 0 Feb 22 01:45 example.txt
labex:project/ $ sudo chmod 700 example.txt
labex:project/ $ ls -l example.txt         
-rwx------ 1 root root 0 Feb 22 01:45 example.txt
labex:project/ $ 
