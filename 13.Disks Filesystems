Linux Disks Filesystems
Linux uses a variety of filesystems to allow us to store and retrieve data from the hardware of a computer system such as disks. The filesystem defines how data is organized, stored, and retrieved on these storage devices. Examples of popular Linux filesystems include EXT4, FAT32, NTFS, and Btrfs.

Each filesystem has its own advantages, disadvantages, and use cases. For example, EXT4 is typically used for Linux system volumes due to its robustness and compatibility with Linux, while FAT32 may be used for removable media like USB drives for its compatibility with almost all operating systems

Here’s an example of how to display the type of filesystems of your mounted devices with the “df” command in Linux:

df -T
The output shows the names of your disks, their filesystem types, and other additional information such as total space, used space, and available space on the disks.

Inodes
In a Linux filesystem, an inode (index node) is a core concept that represents a filesystem object such as a file or a directory. More specifically, an inode is a data structure that stores critical information about a file except its name and actual data. This information includes the file’s size, owner, access permissions, access times, and more.

Every file or directory in a Linux filesystem has a unique inode, and each inode is identified by an inode number within its own filesystem. This inode number provides a way of tracking each file, acting as a unique identifier for the Linux operating system.

Whenever a file is created in Linux, it is automatically assigned an inode that stores its metadata. The structure and storage of inodes are handled by the filesystem, which means the kind and amount of metadata in an inode can differ between filesystems.

Although you would not interact with inodes directly in everyday usage, understanding inodes can be very helpful when dealing with advanced file operations, such as creating links or recovering deleted files.

# Retrieve the inode of a file
ls -i filename

Filesystems
Linux operating system provides multiple ways to handle the data storage through the concept of filesystems under disks. Filesystems, in essence, is the way how files are stored and organized on the storage disk. It’s a critical component of the system as it ensures the integrity, reliability and efficient access to the data.

A disk installed in a Linux system can be divided into multiple partitions, each with its own filesystem. Linux supports various types of filesystems, such as EXT4, XFS, BTRFS, etc. Each one of them has their own advantages regarding performance, data integrity and recovery options.

Configuration of these filesystems relies on a defined hierarchical structure. All the files and directories start from the root directory, presented by ’/’.

Understanding the concept and management of filesystems is key for the successful administration of Linux systems, as it involves routine tasks like mounting/unmounting drives, checking disk space, managing file permissions, and repairing corrupted filesystems.

Code snippet to display the file system in Linux:

df -T
This command will display the type of filesystem, along with the disk usage status.


Mounts
In Linux environments, a very crucial concept related to disk management is the “mounting” of filesystems. Fundamentally, mounting in Linux refers to the process that allows the operating system to access data stored on underlying storage devices, such as hard drives or SSDs. This process attaches a filesystem (available on some storage medium) to a specific directory (also known as a mount point) in the Linux directory tree.

The beauty of this approach lies in the unified and seamless manner in which Linux treats all files, irrespective of whether they reside on a local disk, network location, or any other kind of storage device.

The mount command in Linux is used for mounting filesystems. When a specific filesystem is ‘mounted’ at a particular directory, the system can begin reading data from the device and interpreting it according to the filesystem’s rules.

It’s worth noting that Linux has a special directory, /mnt, that is conventionally used as a temporary mount point for manual mounting and unmounting operations.

mount /dev/sdb1 /mnt
The above command will mount the filesystem (assuming it’s a valid one) on the second partition of a second hard drive at the /mnt directory. After the partition is mounted, you can access the files using the /mnt directory.

Understanding and managing mounts is crucial for effective Linux disk and filesystem management.


Adding Disks
In Linux, hard disks and portable drives are managed and controlled through a series of directories and files, commonly referred to as the Linux Filesystem. When you add new disks in Linux, you need to prepare them before they can be used.

The process involves creating partitions on the disk, creating filesystem on the partitions, and then mounting the filesystems to directories in your system’s directory tree. This becomes important especially when working with multiple disk drives or large data storage units in order to create a seamless user experience.

The following are common commands to manage disks:

Use lsblk to list all block devices (disk and partitions).
Use fdisk /dev/sdX to create a new partition on a disk.
Use mkfs.ext4 /dev/sdX1 to create a new filesystem on a partition.
Use mount /dev/sdX1 /mount/point to mount a filesystem to a directory.
# example commands to add new disk
lsblk                     # list all disks and partitions
sudo fdisk /dev/sdb       # let's suppose new disk is /dev/sdb
sudo mkfs.ext4 /dev/sdb1  # make filesystem(e.g., ext4) on partition 1
sudo mount /dev/sdb1 /mnt # mount new filesystem to /mnt directory
Remember to replace /dev/sdb and /dev/sdb1 with your actual disk and partition identifiers. The mount point /mnt may also be replaced with any other directory as per your system’s structure and preference.e

Adding Disks
In Linux, hard disks and portable drives are managed and controlled through a series of directories and files, commonly referred to as the Linux Filesystem. When you add new disks in Linux, you need to prepare them before they can be used.

The process involves creating partitions on the disk, creating filesystem on the partitions, and then mounting the filesystems to directories in your system’s directory tree. This becomes important especially when working with multiple disk drives or large data storage units in order to create a seamless user experience.

The following are common commands to manage disks:

Use lsblk to list all block devices (disk and partitions).
Use fdisk /dev/sdX to create a new partition on a disk.
Use mkfs.ext4 /dev/sdX1 to create a new filesystem on a partition.
Use mount /dev/sdX1 /mount/point to mount a filesystem to a directory.
# example commands to add new disk
lsblk                     # list all disks and partitions
sudo fdisk /dev/sdb       # let's suppose new disk is /dev/sdb
sudo mkfs.ext4 /dev/sdb1  # make filesystem(e.g., ext4) on partition 1
sudo mount /dev/sdb1 /mnt # mount new filesystem to /mnt directory
Remember to replace /dev/sdb and /dev/sdb1 with your actual disk and partition identifiers. The mount point /mnt may also be replaced with any other directory as per your system’s structure and preference.

Linux Swap under Disks Filesystems
Swap space in Linux is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the physical memory is full, inactive pages in memory are moved to the swap space. Swap space is a portion of a hard disk drive (HDD) that is used for virtual memory.

Having swap space ensures that whenever your system runs low on physical memory, it can move some of the data to the swap, freeing up RAM space, but this comes with performance implications as disk-based storage is slower than RAM.

In the context of disks and filesystems, the swap space can live in two places:

In its own dedicated partition.
In a regular file within an existing filesystem.
For instance, to add a swap file, we might use the fallocate command to create a certain sized file for swap and the mkswap command to make it suitable for swap usage.

fallocate -l 1G /swapfile # creates a swap file
chmod 600 /swapfile # secures the swap file by preventing regular users from reading it
mkswap /swapfile # sets up the Linux swap area
swapon /swapfile # enables the file for swapping
Remember that the decision of where to place your swap space, how much swap space to have, and how to utilize swap space are all important considerations in optimizing your system’s performance.

Linux Logical Volume Manager (LVM)
The Linux Logical Volume Manager (LVM) is a device mapper framework that provides logical volume management for the Linux kernel. It was created to ease disk management, allowing for the use of abstracted storage devices, known as logical volumes, instead of using physical storage devices directly.

LVM is extremely flexible, and features include resizing volumes, mirroring volumes across multiple physical disks, and moving volumes between disks without needing to power down.

LVM works on 3 levels: Physical Volumes (PVs), Volume Groups (VGs), and Logical Volumes (LVs).

PVs are the actual disks or partitions.
VGs combine PVs into a single storage pool.
LVs carve out portions from the VG to be used by the system.
To create an LVM, you need to follow these steps in Linux:

pvcreate /dev/sdb1
vgcreate my-vg /dev/sdb1
lvcreate -L 10G my-vg -n my-lv
In the above commands, we create a physical volume on /dev/sdb1, then create a volume group named my-vg. Finally, we carve out a 10GB logical volume from the volume group and name it my-lv.

These features, collectively, provide great ease in managing storage systems especially for large enterprise class systems where a large array of disks are typically used.
